if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi; MYPROMPT='1'
export DOTFILES="$HOME/.dotfiles"
export ZSH_HOME="$HOME/.zsh"
export ZINIT_HOME="$HOME/.zinit"
ZSH_FUNCTIONS="$DOTFILES/zsh/functions"
ZSH_COMPLETIONS="$DOTFILES/zsh/completions"
ZSH_AUTOSUGGEST_MANUAL_REBIND='set'
#ZSH_AUTOSUGGEST_STRATEGY=(dir_history custom_history completion)
HISTORY_SUBSTRING_SEARCH_FUZZY='set'
ZSHZ_CMD=" " # Do not set the alias, fz will cover that
ZSHZ_UNCOMMON='1'
# Strings to ignore when using dotscheck, escape stuff that could be wild cards (../)
dotsvar=( gtkrc-2.0 kwinrulesrc '\.\./' \.config/gtk-3\.0/settings\.ini )
# ============================================================================= #
# *** ➜ ➜ ➜ ZINIT
# ============================================================================= #
if [[ ! -f "$ZINIT_HOME/bin/zinit.zsh" ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone --quiet https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi; source "$ZINIT_HOME/bin/zinit.zsh"
(( ${+_comps} )) && _comps[zinit]=_zinit
autoload -Uz _zinit
fpath+=( "${ZSH_FUNCTIONS}/autoload/" )
    for func in $ZSH_FUNCTIONS/autoload/*; do
        autoload -Uz ${func:t}
    done
unset func
    autoload -Uz chpwd_recent_dirs add-zsh-hook
    add-zsh-hook chpwd chpwd_recent_dirs
# ============================================================================= #
fpath+=( "${ZSH_COMPLETIONS}" ) 
module_path+=( "${HOME}/.zinit/bin/zmodules/Src" )
zmodload zdharma/zplugin &>/dev/null
# Strings to ignore when using dotscheck, escape stuff that could be wild cards (../)
# ============================================================================= #
zt()       { zinit depth'3' lucid ${1/#[0-9][a-c]/wait"${1}"} "${@:2}"; }
turbo0()   { zinit ice wait"0a" lucid             "${@}"; }
turbo1()   { zinit ice wait"0b" lucid             "${@}"; }
turbo2()   { zinit ice wait"0c" lucid             "${@}"; }
zcommand() { zinit ice wait"0b" lucid as"command" "${@}"; }
zload()    { zinit load                           "${@}"; }
zlight()   { zinit light                          "${@}"; }
zsnippet() { zinit snippet                        "${@}"; }
auto-ls()  { ls; }
[[ ${chpwd_functions[(r)auto-ls]} == auto-ls ]] || chpwd_functions=( auto-ls $chpwd_functions )
dotsvar=( gtkrc-2.0 kwinrulesrc '\.\./' \.config/gtk-3\.0/settings\.ini )
zsnippet "$DOTFILES/zsh/plugins/config-files.plugin.zsh"
# ============================================================================= #
# *** ➜ ➜ ➜ OH-MY-ZSH
# ============================================================================= #
setopt promptsubst
setopt complete_aliases

zt light-mode for \
    trigger-load'!x' svn \
        OMZ::plugins/extract \
        OMZL::history.zsh \
        OMZP::systemd/systemd.plugin.zsh \
        OMZP::sudo/sudo.plugin.zsh \
        OMZ::lib/git.zsh \
        OMZ::plugins/git/git.plugin.zsh \
        OMZ::lib/directories.zsh \
        OMZ::lib/compfix.zsh \
        OMZ::lib/grep.zsh \
        OMZ::lib/termsupport.zsh \
        OMZ::lib/theme-and-appearance.zsh \
        OMZ::lib/key-bindings.zsh
zt 0a light-mode for \
        OMZ::plugins/ssh-agent/ssh-agent.plugin.zsh \
        OMZ::plugins/gpg-agent/gpg-agent.plugin.zsh \
        OMZ::plugins/extract/extract.plugin.zsh \
        OMZ::plugins/npm/npm.plugin.zsh \
        OMZ::plugins/pip/pip.plugin.zsh \
        OMZ::plugins/pyenv/pyenv.plugin.zsh 
zt 0a light-mode for \
    mafredri/zsh-async \
    MichaelAquilina/zsh-you-should-use \
    zpm-zsh/ls \
    unixorn/git-extra-commands \
    denysdovhan/gitio-zsh
# ============================================================================= #
# Additional completion definitions
zt 0a light-mode for \
    atload"zpcompinit" lucid as"completion" \
        OMZ::plugins/docker/_docker \
    atload'zstyle ":completion:*" special-dirs false' \
        OMZL::completion.zsh \
    lukechilds/zsh-better-npm-completion \
        blockf atpull'zinit creinstall -q .' \
    zsh-users/zsh-completions \
    blockf nocompletions compile'functions/*~*.zwc' \
        marlonrichert/zsh-edit
bindkey -r '^[[A'
bindkey -r '^[[B'
__bind_history_keys() {
    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down
}
zt 0b light-mode for \
            RobSis/zsh-reentry-hook \
        pick'autoenv.zsh' nocompletions \
            Tarrasch/zsh-autoenv \
        atload'__bind_history_keys' atload'bindkey "${terminfo[kcuu1]}" history-substring-search-up; 
        bindkey "${terminfo[kcud1]}" history-substring-search-down' \
            zsh-users/zsh-history-substring-search \
            zdharma/history-search-multi-word

turbo1 atinit"ZINIT[COMPINIT_OPTS]='-i' zpcompinit; zpcdreplay"
    zload zdharma/fast-syntax-highlighting
turbo1 atload"_zsh_autosuggest_start"; zload 'zsh-users/zsh-autosuggestions'
#export ZSH_AUTOSUGGEST_USE_ASYNC=1
#export ZSH_AUTOSUGGEST_MANUAL_REBIND=1
# ============================================================================= #
zt light-mode for \
        zinit-zsh/z-a-patch-dl \
        zinit-zsh/z-a-submods \
        zinit-zsh/z-a-as-monitor \
        zinit-zsh/z-a-bin-gem-node \
        zinit-zsh/z-a-rust \
        NICHOLAS85/z-a-linkman \
        NICHOLAS85/z-a-linkbin

zt 0b pack for \
        dircolors-material \
        ls_colors \
        doctoc \
        @asciidoctor \
        fzf \
        pyenv

zt light-mode for lukechilds/zsh-nvm
turbo1; zsnippet "$DOTFILES/zsh/plugins/zsh-rbenv.plugin.zsh"

turbo1 as"program" make'!' atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' src"zhook.zsh"
zlight 'direnv/direnv'

turbo1 from"gh-r" as"program" mv"docker* -> docker-compose" bpick"*linux*"
zlight 'docker/compose'

turbo1 from"gh-r" as"program" mv"bat* -> bat" pick"bat/bat" atload"alias cat=bat"
zlight 'sharkdp/bat'

zt 0c light-mode binary for \
    atclone'./just --completions zsh > _just' atpull'%atclone' \
        casey/just \
    bpick'*linux64*' \
        zyedidia/micro \
    atclone'mv -f **/*.zsh _bat' atpull'%atclone' \
        @sharkdp/bat \
        @sharkdp/hyperfine \
        @sharkdp/fd

zt 0c light-mode binary for \
    lbin \
        laggardkernel/git-ignore \
    lbin from'gh-r' \
        Peltoche/lsd \
    lbin'!' patch"${pchf}/%PLUGIN%.patch" reset \
        kazhala/dotbare

turbo1 as"program" pick"src/batgrep.sh" 
turbo1 as"program" pick"src/batdiff.sh"
zlight 'eth-p/bat-extras' 
    alias rg=batgrep.sh
    alias bd=batdiff.sh
    alias man=batman.sh

unset -f turbo0 turbo1 turbo2 zcommand zload zlight zsnippet
# ============================================================================= #
# *** ➜ ➜ ➜ [THEMES]
# ============================================================================= #
zinit ice for load'![[ $MYPROMPT = 1 ]]' unload'![[ $MYPROMPT != 1 ]]' \
depth='1'; zinit light romkatv/powerlevel10k

# Load when MYPROMPT == 2
zinit ice load'![[ $MYPROMPT = 2 ]]' unload'![[ $MYPROMPT != 2 ]]' \
    pick"/dev/null" multisrc"{async,pure}.zsh" \
    atload'!prompt_pure_precmd' lucid nocd
zinit load sindresorhus/pure

# Load when MYPROMPT == 3
zinit ice load'![[ $MYPROMPT = 3 ]]' unload'![[ $MYPROMPT != 3 ]]' \
    atload'!geometry::prompt' lucid nocd
zinit load geometry-zsh/geometry
# ============================================================================= #
# *** ➜ ➜ ➜ [LOCAL]
# ============================================================================= #
zinit is-snippet for \
    if"[[ -f $HOME/.localrc  ]]" $HOME/.localrc
# ============================================================================= #
# *** ➜ ➜ ➜ [p10k] [PROMPT]
# ============================================================================= #
zinit ice if"[[ $MYPROMPT = 1  ]]"; source "$DOTFILES/zsh/themes/p10k.zsh"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/sall/MEGA/(_GOOGLE_DEV_)/google-cloud-sdk/path.zsh.inc' ]; then . '/home/sall/MEGA/(_GOOGLE_DEV_)/google-cloud-sdk/path.zsh.inc'; fi
# The next line enables shell command completion for gcloud.
if [ -f '/home/sall/MEGA/(_GOOGLE_DEV_)/google-cloud-sdk/completion.zsh.inc' ]; then . '/home/sall/MEGA/(_GOOGLE_DEV_)/google-cloud-sdk/completion.zsh.inc'; fi
alias mce='micro'
alias gic='git clone'zsh