# ============================================================================= #
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
export DOTFILES="$HOME/.dotfiles"
export ZSH_HOME="$HOME/.zsh"
export ZINIT_HOME="$ZSH_HOME/.zinit"
export EDITOR='micro'
export SYSTEMD_EDITOR="${EDITOR}"
export GIT_DISCOVERY_ACROSS_FILESYSTEM='true' # etckeeper on bedrock
#CURRENT_DIR=${0:a:h}
fpath+=( "${DOTFILES}/zsh/functions" )
    for func in $DOTFILES/zsh/functions/*; do
        autoload -Uz ${func:t}
    done
# 1 = powerlevel10k
MYPROMPT='1'
# ============================================================================= #
# *** ➜ ➜ ➜ ZINIT [INSTALLER]
# ============================================================================= #
if [[ ! -f "$ZINIT_HOME/bin/zinit.zsh" ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$ZSH_HOME/.zinit" && command chmod g-rwX "$ZSH_HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$ZSH_HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi
source "$ZINIT_HOME/bin/zinit.zsh"
for src_files in "${NVM_DIR}/nvm.sh" \
            "${NVM_DIR}/bash_completion"; do
    [ -s "${src_files}" ] && source "${src_files}"
done
# ============================================================================= #
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
module_path+=( "${HOME}/.zsh/.zinit/bin/zmodules/Src" )
zmodload zdharma/zplugin &>/dev/null
autoload -Uz cdr
autoload -Uz chpwd_recent_dirs
[[ ${chpwd_functions[(r)auto-ls]} == auto-ls ]] || chpwd_functions=( auto-ls $chpwd_functions )
# ============================================================================= #
# *** ➜ ➜ ➜ OH-MY-ZSH [LIBRARY] [PLUGINS] 
# ============================================================================= #
setopt promptsubst

zinit wait lucid for \
	OMZL::git.zsh \
    OMZL::history.zsh \
    OMZL::completion.zsh \
	OMZL::clipboard.zsh \
    OMZL::functions.zsh \
	OMZL::compfix.zsh \
    OMZL::misc.zsh \
	OMZL::correction.zsh \
    atload"
        alias ..='cd ..'
        alias ...='cd ../..'
        alias ....='cd ../../..'
        alias .....='cd ../../../..'
    " \
	OMZL::directories.zsh \
	OMZL::grep.zsh \
	OMZL::key-bindings.zsh \
	OMZL::spectrum.zsh \
	OMZL::termsupport.zsh 

zinit wait lucid for \
	OMZP::git \
    OMZP::extract \
    OMZP::systemd/systemd.plugin.zsh \
    OMZP::taskwarrior/taskwarrior.plugin.zsh \
    OMZP::sudo/sudo.plugin.zsh \
    OMZP::pip/pip.plugin.zsh \
    OMZP::pyenv/pyenv.plugin.zsh \
    OMZP::nvm/nvm.plugin.zsh \
    OMZP::rbenv/rbenv.plugin.zsh \
    OMZP::docker/_docker \
        as'completion' \
    OMZP::cargo/_cargo \
        as'completion' \
    OMZP::minikube/minikube.plugin.zsh \
        as'completion' \
    OMZP::direnv/direnv.plugin.zsh \
    OMZP::gpg-agent/gpg-agent.plugin.zsh \
    OMZP::nmap/nmap.plugin.zsh

# ============================================================================= #
# *** ➜ ➜ ➜ [PLUGINS]
# ============================================================================= #
zinit light bobsoppe/zsh-ssh-agent
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
zinit ice wait"0a" lucid atload"_zsh_autosuggest_start" \
zinit light zsh-users/zsh-autosuggestions

zinit ice wait"0b" lucid atload'bindkey "$terminfo[kcuu1]" history-substring-search-up; bindkey "$terminfo[kcud1]" history-substring-search-down' \
zinit light zsh-users/zsh-history-substring-search \
bindkey '^[[A' history-substring-search-up \
bindkey '^[[B' history-substring-search-down 

zinit ice wait"0b" lucid blockf \
zinit light zsh-users/zsh-completions 
zstyle ':completion:*' completer _expand _complete _ignored _approximate 
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 
zstyle ':completion:*' menu select=2 
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s' 
zstyle ':completion:*:descriptions' format '-- %d --' 
zstyle ':completion:*:processes' command 'ps -au$USER' 
zstyle ':completion:complete:*:options' sort false 
zstyle ':fzf-tab:complete:_zlua:*' query-string input 
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm,cmd -w -w"
zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts --preview=$extract'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap
zstyle ":completion:*:git-checkout:*" sort false
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

zinit wait"0c" lucid for \
    atinit"ZINIT[COMPINIT_OPTS]=-C; zpcompinit; zpcdreplay" \
    zdharma/fast-syntax-highlighting \
    zdharma/history-search-multi-word

export NVM_AUTO_USE=true
zinit ice wait"1a" lucid
zinit light lukechilds/zsh-nvm

zinit wait"1" lucid for \
    mafredri/zsh-async \
    zpm-zsh/ls \
    MichaelAquilina/zsh-you-should-use \
    unixorn/git-extra-commands \
    lukechilds/zsh-better-npm-completion \
    denysdovhan/gitio-zsh \
    mattberther/zsh-rbenv \
    mattberther/zsh-pyenv

zinit wait"1b" lucid for \
    zdharma/declare-zsh \
    zdharma/zflai \
    blockf \
    zdharma/zui \
        zinit-zsh/zinit-console \
    trigger-load'!crasis' \
        zdharma/zinit-crasis \
    atinit"forgit_ignore='fgi'" \
        wfxr/forgit

zinit ice lucid wait"0" as"program" make'!' atclone'./direnv hook zsh > zhook.zsh' \
    atpull'%atclone' src"zhook.zsh"; zinit light direnv/direnv

zinit ice lucid wait"0" atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!' \
    zinit light trapd00r/LS_COLORS

#zinit ice lucid wait"0" from"gh-r" as"program" mv"docker* -> docker-compose" bpick"*linux*" \
#    zinit load docker/compose

#zinit ice lucid wait"0" as"program" from"gh-r" mv"lazygit* -> lazygit" atload"alias lg='lazygit'" \
#zinit light 'jesseduffield/lazygit'

#zinit ice lucid wait"0" as"program" from"gh-r" mv"lazydocker* -> lazydocker" atload"alias lg='lazydocker'" \
#zinit light 'jesseduffield/lazydocker'

zinit ice lucid wait"0" as"program" from"gh-r" bpick='*-linux-amd64.deb' pick"usr/bin/rclone" \
    zinit light 'rclone/rclone'

zinit ice lucid wait"0" from"gh-r" as"program" mv"bat* -> bat" pick"bat/bat" atload"alias cat=bat" \
    zinit light sharkdp/bat
# BAT-EXTRAS
zinit ice wait"1" as"program" pick"src/batgrep.sh" lucid 
zinit ice wait"1" as"program" pick"src/batdiff.sh" lucid
zinit light eth-p/bat-extras 
    alias rg=batgrep.sh 
    alias bd=batdiff.sh 
    alias man=batman.sh 

zinit ice for \
    load"![[ $MYPROMPT = 1 ]]" \
    unload"![[ $MYPROMPT != 1 ]]" \
    depth='1'; zinit light romkatv/powerlevel10k

zinit lucid load"![[ $MYPROMPT = 2 ]]" unload"![[ $MYPROMPT != 2 ]]" \
    pick"/dev/null" multisrc"{async,pure}.zsh" atload'!prompt_pure_precmd' nocd for \
    sindresorhus/pure
# ============================================================================= #
# *** ➜ ➜ ➜ OTHER
# ============================================================================= #
autoload colors && colors
zinit is-snippet for \
    if"[[ -f $HOME/.localrc  ]]" $HOME/.localrc
# ============================================================================= #
# *** ➜ ➜ ➜ p10k PROMPT
# ============================================================================= #
if [ "$MYPROMPT" = 1 ]; then; source "$DOTFILES/zsh/themes/p10k"; fi