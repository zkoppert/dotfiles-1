# ============================================================================= #
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
export DOTFILES="$HOME/.dotfiles"
fpath+=( "$DOTFILES/zsh/functions" )
    for func in $DOTFILES/zsh/functions/*; do
        autoload -Uz ${func:t}
    done
export ZSH_HOME="$HOME/.zsh"
export ZINIT_HOME="$ZSH_HOME/.zinit"
export EDITOR='micro'
export SYSTEMD_EDITOR="${EDITOR}"
export GIT_DISCOVERY_ACROSS_FILESYSTEM='true' # etckeeper on bedrock
#CURRENT_DIR=${0:a:h}
# 1 = powerlevel10k
MYPROMPT='1'
# ============================================================================= #
# *** ➜ ➜ ➜ ZINIT [INSTALLER]
# ============================================================================= #
if [[ ! -f "$ZINIT_HOME/bin/zinit.zsh" ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$ZSH_HOME/.zinit" && command chmod g-rwX "$ZSH_HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$ZSH_HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi
source "$ZINIT_HOME/bin/zinit.zsh"
for src_files in "${NVM_DIR}/nvm.sh" \
            "${NVM_DIR}/bash_completion"; do
    [ -s "${src_files}" ] && source "${src_files}"
done
# ============================================================================= #
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
module_path+=( "${HOME}/.zsh/.zinit/bin/zmodules/Src" )
zmodload zdharma/zplugin &>/dev/null
[[ ${chpwd_functions[(r)auto-ls]} == auto-ls ]] || chpwd_functions=( auto-ls $chpwd_functions )
# ============================================================================= #
# *** ➜ ➜ ➜ OH-MY-ZSH [LIBRARY] [PLUGINS] 
# ============================================================================= #
setopt promptsubst

zinit wait lucid for \
    OMZL::history.zsh \
    OMZL::completion.zsh \
	OMZL::clipboard.zsh \
    OMZL::functions.zsh \
	OMZL::compfix.zsh \
    OMZL::misc.zsh \
	OMZL::correction.zsh \
    atload"
        alias ..='cd ..'
        alias ...='cd ../..'
        alias ....='cd ../../..'
        alias .....='cd ../../../..'
    " \
	OMZL::directories.zsh \
	OMZL::git.zsh \
	OMZL::grep.zsh \
	OMZL::key-bindings.zsh \
	OMZL::spectrum.zsh \
	OMZL::termsupport.zsh 

zinit wait lucid for \
	OMZP::git \
    OMZP::extract \
    OMZP::systemd/systemd.plugin.zsh \
    OMZP::taskwarrior/taskwarrior.plugin.zsh \
    OMZP::sudo/sudo.plugin.zsh \
    OMZP::pip/pip.plugin.zsh \
    OMZP::pyenv/pyenv.plugin.zsh \
    OMZP::nvm/nvm.plugin.zsh \
    OMZP::rbenv/rbenv.plugin.zsh \
    OMZP::thefuck/thefuck.plugin.zsh \
    OMZP::docker/_docker \
        as'completion' \
    OMZP::cargo/_cargo \
        as'completion' \
    OMZP::minikube/minikube.plugin.zsh \
        as'completion' \
    OMZP::direnv/direnv.plugin.zsh \
    OMZP::gcloud/gcloud.plugin.zsh \
    OMZP::gpg-agent/gpg-agent.plugin.zsh \
    OMZP::ssh-agent/ssh-agent.plugin.zsh \
    OMZP::nmap/nmap.plugin.zsh

# ============================================================================= #
# *** ➜ ➜ ➜ [PLUGINS]
# ============================================================================= #
# @source: https://github.com/crivotz/dot_files/blob/master/linux/zplugin/zshrc
# These plugins should be loaded after ohmyzsh plugins

zinit wait lucid for \
    atinit"ZINIT[COMPINIT_OPTS]=-C; zpcompinit; zpcdreplay" \
    zdharma/fast-syntax-highlighting \
    atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions \
    zdharma/history-search-multi-word

zinit wait"1" lucid for \
    mafredri/zsh-async \
    zpm-zsh/ls \
    MichaelAquilina/zsh-you-should-use \
    unixorn/git-extra-commands \
    lukechilds/zsh-better-npm-completion \
    denysdovhan/gitio-zsh \
    mattberther/zsh-rbenv \
    mattberther/zsh-pyenv

#zinit wait"2" lucid for \
#    zdharma/declare-zsh \
#    zdharma/zflai \
#    blockf \
#    zdharma/zui \
#        zinit-zsh/zinit-console \
#    trigger-load'!crasis' \
#        zdharma/zinit-crasis \
#    atinit"forgit_ignore='fgi'" \
#        wfxr/forgit

zinit wait'2' lucid atload"zicompinit; zicdreplay" blockf for \
    zsh-users/zsh-completions

zinit ice as"program" make'!' atclone'./direnv hook zsh > zhook.zsh' \
    atpull'%atclone' src"zhook.zsh"; zinit light direnv/direnv

zinit ice atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!' \
    zinit light trapd00r/LS_COLORS

zinit ice from"gh-r" as"program" mv"docker* -> docker-compose" bpick"*linux*" \
    zinit load docker/compose

# Semi-graphical .zshrc editor for zinit commands
zinit load zdharma/zui
zinit ice lucid wait'[[ -n ${ZLAST_COMMANDS[(r)cras*]} ]]'
zinit load zdharma/zplugin-crasis

zinit ice for \
    load'![[ $MYPROMPT = 1 ]]' \
    unload'![[ $MYPROMPT != 1 ]]' \
    depth='1'; zinit light romkatv/powerlevel10k

zinit lucid load'![[ $MYPROMPT = 2 ]]' unload'![[ $MYPROMPT != 2 ]]' \
    pick"/dev/null" multisrc"{async,pure}.zsh" atload'!prompt_pure_precmd' nocd for \
        sindresorhus/pure
# ============================================================================= #
# *** ➜ ➜ ➜ LOCAL CONFIG
# ============================================================================= #
zinit is-snippet for \
    if"[[ -f $HOME/.localrc  ]]" $HOME/.localrc
# ============================================================================= #
# *** ➜ ➜ ➜ p10k PROMPT
# ============================================================================= #
if [ "$MYPROMPT" = 1 ]; then; source "$DOTFILES/zsh/themes/p10k"; fi