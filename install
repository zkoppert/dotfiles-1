#!/usr/bin/env bash
# ============================================================================= #
#  ➜ ➜ ➜ VARIABLES
# ============================================================================= #
DOSYNC_VERSION="v0.1"
DOTFILES="$HOME/.dotfiles"
SYNCFILE="$DOTFILES/sync.config"
GITOPT="-q"
GITSUB="--quiet"
GITSUBOPT="--quiet"
INSTALL_FONTS="${INSTALL_FONTS:-no}"
INSTALL_DOSYNC="${INSTALL_DOSYNC:-no}"
INSTALL_NOTEBOOK="${INSTALL_NOTEBOOK:-no}"
NO_TTY="${NOTTY:-no}"
PIPED="${PIPED:-no}"

# ============================================================================= #
#  ➜ ➜ ➜ FUNCTIONS
# ============================================================================= #

ERROR() {
    echo "$(tput setaf 1)"
    echo "$@" >&2
    echo "$(tput sgr0)"

    exit 1
}

FINISHED() {
    echo "$(tput setaf 2)"
    echo "Finished successfully!"
    echo "$(tput sgr0)"

    exit 0
}

HAS_TERMINAL() {
    [ -t 0 ]
}

IS_TTY() {
    HAS_TERMINAL
}

IS_PIPED() {
    ! [ -t 1 ]
}

IS_GIT() {
    if [[ ! -d .git ]]; then
        echo "Not a git repository"
        exit 1
    fi
}

INIT_LOCAL() {
    cd "$DOTFILES" || ERROR "Failed to enter dotfiles directory"
    IS_GIT
    # init the main repo
    git submodule $GITSUB update --init --recursive
    cd || return 0
}

GET_GIT_ORIGIN() {
    cd "$DOTFILES" || ERROR "Failed to enter dotfiles directory"
    if [[ -d .git ]]; then
        ORIGIN=$(git config -l | grep remote.origin.url | awk -F'=' '{print $2}')
    fi
    cd || return 0
}

GIT_PULL() {
    GET_GIT_ORIGIN
    cd "$DOTFILES" || ERROR "Failed to enter dotfiles directory"
    IS_GIT
    echo "Pulling latest changes from $ORIGIN"
    git pull $GITOPT
    echo "Pulling latest changes for submodules"
    # Required if a submodule origin changed
    git submodule $GITSUBOPT sync
    git submodule $GITSUBOPT foreach --recursive git fetch
    git submodule $GITSUBOPT update --init --recursive
    cd || return 0
}

GIT_COMMIT() {
    GET_GIT_ORIGIN
    cd "$DOTFILES" || ERROR "Failed to enter dotfiles directory"
    echo "Commiting latest changes to the repository"
    git commit -a $GITOPT
    cd || return 0
}

GIT_PUSH() {
    GET_GIT_ORIGIN
    cd "$DOTFILES" || ERROR "Failed to enter dotfiles directory"
    echo "Pushing changes upstream to $ORIGIN" &&
        git push $GITOPT
    cd || return 0
}

GIT_CHECK_ALL() {
    GET_GIT_ORIGIN
    cd "$DOTFILES" || ERROR "Failed to enter dotfiles directory"
    git add .
    cd || return 0
    GIT_COMMIT
    GIT_PUSH
}

GET_SYNCFILE() {
    if [[ ! -s $SYNCFILE ]]; then
        if [[ -s "$DOTFILES/sync.config" ]]; then
            SYNCFILE="$DOTFILES/sync.config"
        else
            echo "File $DOTFILES/sync.config doesnt exist, exiting"
            exit 1
        fi
    fi
}

GET_FILES_LIST() {
    SRCFILES="$(sed -n '/\[files\]/,/\[endfiles\]/p' $SYNCFILE | grep -v '^\[.*files]' | grep -v ^#)"
    if [[ -z "$SRCFILES" ]]; then
        echo "Specify files to sync in $DOTFILES/sync.config file"
        exit 1
    fi
}

GET_FILE() {
    srcfile="$(echo $file | awk -F: '{print $1}')"
    dstfile="$(echo $file | awk -F: '{print $2}')"
    dotsrc="$DOTFILES/$srcfile"

    if [[ $dstfile = "" ]]; then
        dstfile=".$(basename "$srcfile")"
    fi
    dotfile="$HOME/$dstfile"
}
GET_OPTIONS() {
    if [ "$NO_TTY" = yes ]; then
        echo "No tty"
        FINISHED
    fi
    if [ "$INSTALL_FONTS" = yes ]; then
        echo "Installing fonts"
        FINISHED
    fi
    if [ "$INSTALL_DOSYNC" = yes ]; then
        echo "Installing DoSync"
        ln -sf "$DOTFILES/install" "$DOTFILES/bin/dosync"
        export PATH="$PATH:$DOTFILES/bin"
        FINISHED
    fi
    if [ "$INSTALL_NOTEBOOK" = yes ]; then
        echo "Installing NoteBook (nb.sh)"
        sudo wget https://raw.github.com/xwmx/nb/master/nb -O /usr/local/bin/nb &&
            sudo chmod +x /usr/local/bin/nb &&
            sudo nb completions install --download
        FINISHED
    fi
}

DO_OPTIONS() {
    if HAS_TERMINAL; then
        export TERM="xterm-256color"
    fi
    # Run as unattended if stdin is not a tty
    if ! IS_TTY; then
        NO_TTY=yes
    fi
    if IS_PIPED; then
        PIPED=yes
    fi
    while [ $# = 0 ]; do
        DO_SYNC
        FINISHED
    done
    while [ $# -gt 0 ]; do
        case $1 in
        --unattended) NO_TTY=yes ;;
        --dosync) INSTALL_DOSYNC=yes ;;
        --fonts) INSTALL_FONTS=yes ;;
        --notebook) INSTALL_NOTEBOOK=yes ;;
        -U | --pull)
            GIT_PULL
            FINISHED
            ;;
        -C | --commit)
            GIT_COMMIT
            FINISHED
            ;;
        -P | --push)
            GIT_PUSH
            FINISHED
            ;;
        -A | --all)
            GIT_CHECK_ALL
            FINISHED
            ;;
        esac
        shift
    done
    GET_OPTIONS "$@"
}

DO_SYNC() {
    GET_SYNCFILE
    GET_FILES_LIST
    for file in $SRCFILES; do
        GET_FILE "$file"
        ln -sf "$dotsrc" "$dotfile"
        echo "Symlinked: $dotsrc -> $dotfile"
    done
    FINISHED
}

while true; do
    echo "$(tput setaf 2)"
    echo "DoSync Version: $DOSYNC_VERSION"
    echo "$(tput setaf 4)"
    DO_OPTIONS "$@"
    echo "$(tput sgr0)"
done
